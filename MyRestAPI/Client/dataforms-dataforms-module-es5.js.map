{"version":3,"sources":["webpack:///./src/app/dataforms/agtable/agtable.component.html","webpack:///./src/app/dataforms/crudform/crudform.component.html","webpack:///./src/app/dataforms/agtable/agtable.component.css","webpack:///./src/app/dataforms/agtable/agtable.component.ts","webpack:///./src/app/dataforms/crudform/crudform.component.css","webpack:///./src/app/dataforms/crudform/crudform.component.ts","webpack:///./src/app/dataforms/dataforms.module.ts","webpack:///./src/app/services/employee.service.ts"],"names":[],"mappings":"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","file":"dataforms-dataforms-module-es5.js","sourcesContent":["module.exports = \"<ag-grid-angular \\n    style=\\\"width: 1000px; height: 800px\\\" \\n    class=\\\"ag-theme-balham\\\"\\n    [rowData]=\\\"rows\\\"\\n    [columnDefs]=\\\"cols\\\"\\n    [pagination]=\\\"true\\\"\\n    [paginationPageSize]=\\\"20\\\"\\n    rowSelection=\\\"multiple\\\"\\n    >\\n</ag-grid-angular>\"","module.exports = \"<form      [formGroup]=\\\"empForm\\\"  (submit)=\\\"saveEmployee()\\\">\\n  <table>\\n        <tr>\\n                <th>Employee id</th>\\n                <td><input type=\\\"text\\\" formControlName=\\\"employee_id\\\"></td>\\n                <td>\\n                       <div *ngIf='empForm.controls.employee_id.hasError(\\\"required\\\")'>\\n                               Should be filled</div>\\n                      <div *ngIf='empForm.controls.employee_id.hasError(\\\"pattern\\\")'>\\n                                    Should be a Number</div>\\n                </td>\\n                </tr>\\n      <tr>\\n      <th>Name</th>\\n      <td><input type=\\\"text\\\" formControlName=\\\"name\\\"></td>\\n      <td>\\n             <div *ngIf='empForm.controls.name.hasError(\\\"required\\\")'>\\n                     Should be filled</div>\\n          <div *ngIf='empForm.controls.name.hasError(\\\"needFormat\\\")'>\\n                         No Symbols allowed for name</div>\\n      </td>\\n      </tr>\\n       <tr>\\n      <th>Designation</th>\\n      <td><input type=\\\"text\\\" formControlName=\\\"designation\\\"></td>\\n      <td>\\n             <div *ngIf='empForm.controls.designation.hasError(\\\"required\\\")'>\\n                     Should be filled</div>\\n      </td>\\n      </tr>\\n      <tr>\\n      <th>City</th>\\n      <td><select formControlName=\\\"city\\\">\\n          <option *ngFor=\\\"let x of cities\\\">{{x}}</option>\\n         </select>\\n         </td>\\n      <td></td>\\n      </tr>\\n      <tr>\\n            <th>Basic</th>\\n            <td><input type=\\\"text\\\" formControlName=\\\"basic\\\"></td>\\n            <td>\\n                   <div *ngIf='empForm.controls.basic.hasError(\\\"required\\\")'>\\n                           Should be filled</div>\\n                  <div *ngIf='empForm.controls.basic.hasError(\\\"pattern\\\")'>\\n                                Should be a Number</div>\\n            </td>\\n     </tr>\\n      <tr>\\n          <th>qualificaiton</th>\\n          <td><input type=\\\"text\\\" formControlName=\\\"qualification\\\">\\n              </td>\\n          <td>\\n                 <div *ngIf='empForm.controls.qualification.hasError(\\\"required\\\")'>\\n                         Should be filled</div>\\n          </td>\\n      </tr>\\n      <tr><td colspan=\\\"3\\\" align=\\\"center\\\">\\n             <button type=\\\"submit\\\"  class=\\\"btn btn-primary\\\" [disabled]=\\\"!empForm.valid\\\">\\n                        Post Review</button>\\n         </td></tr>\\n  </table>\\n\\n\\n</form>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2RhdGFmb3Jtcy9hZ3RhYmxlL2FndGFibGUuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { SupplyService } from 'src/app/services/supply.service';\nimport { columnNames, supplymaster } from 'src/app/models/supplymaster';\n\n@Component({\n  selector: 'app-agtable',\n  templateUrl: './agtable.component.html',\n  styleUrls: ['./agtable.component.css']\n})\nexport class AgtableComponent implements OnInit {\n  cols=columnNames;\n  rows:supplymaster[]=[];\n  constructor(private ss:SupplyService) { }\n\n  ngOnInit() {\n       this.ss.getSupplyMaster().subscribe(\n           (data:supplymaster[])=>this.rows=data,\n           ()=>this.rows=[]\n       )\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2RhdGFmb3Jtcy9jcnVkZm9ybS9jcnVkZm9ybS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { employee } from 'src/app/models/employee';\nimport { FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { EmployeeService } from 'src/app/services/employee.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-crudform',\n  templateUrl: './crudform.component.html',\n  styleUrls: ['./crudform.component.css']\n})\nexport class CrudformComponent implements OnInit {\n  empForm:any;\n  employees:employee[];\n  cities:string[]=[\"Chennai\",\"Bangalore\",\"Jaipur\",\"Nagpur\",\"Mumbai\"];\n  \n    constructor(private formbuilder:FormBuilder,private es:EmployeeService,private router:Router) { \n     this.empForm= this.formbuilder.group({\n        employee_id:['',[Validators.required,Validators.pattern(\"[0-9]+\")]],\n        name:['',[Validators.required,isSymbols]],\n        designation:['',Validators.required],\n        basic:['',[Validators.required, Validators.pattern(\"[0-9\\.]+\")]],\n        qualification:['',Validators.required] ,\n        city:['Chennai']\n      });\n    }\n \n\n  ngOnInit() {\n  }\n\n  saveEmployee(){\n    let obj={\n      employee_id:this.empForm.value.employee_id,\n      name:this.empForm.value.name,\n      city:this.empForm.value.city,\n      designation:this.empForm.value.designation,\n      basic:this.empForm.value.basic,\n      qualification:this.empForm.value.qualification\n    }\n\n    this.es.storeEmployee(obj).subscribe(\n      ()=>{\n        alert(\"Data is stored\");\n        this.router.navigate([\"\"]);\n      },\n      ()=>alert(\"data Not Stored\")\n    )\n  }\n\n}\n\nfunction isSymbols(input: FormControl){\n  let temp:RegExp=new RegExp('[\\._$@0-9]');\n  let temp1:boolean=false;\n  if(!temp.test(input.value))\n      temp1=true;\n\n    return temp1?null:{needFormat:true};\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {ReactiveFormsModule,FormsModule} from '@angular/forms';\nimport { AgtableComponent } from './agtable/agtable.component';\nimport { CrudformComponent } from './crudform/crudform.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AgGridModule } from 'ag-grid-angular';\n\n\nconst routes:Routes=[\n  {path:\"agtable\",component:AgtableComponent},\n  {path:\"insert\",component: CrudformComponent},\n  {path:\"update/:uid\",component:CrudformComponent},\n  {path:\"delete/:did\",component:CrudformComponent}\n]\n\n@NgModule({\n  declarations: [AgtableComponent, CrudformComponent],\n  imports: [\n    CommonModule,\n    AgGridModule.withComponents([]),\n    RouterModule.forChild(routes),\n    ReactiveFormsModule,\n    FormsModule\n  ],\n  exports:[RouterModule]\n})\nexport class DataformsModule { }\n","import { Injectable } from '@angular/core';\nimport { employee } from '../models/employee';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeeService {\n\nhttpOptions;\ncurrent:employee[];\n  constructor(private http:HttpClient) { }\n\n  getEmployees():Observable<object>\n  {\n    return this.http.get(\"http://localhost:49383/api/Emp\");\n  }\n\n  storeEmployee(obj:employee):Observable<object>{\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/json'\n      })\n    }\n    return this.http.post(\"http://localhost:49383/api/Emp\",obj,this.httpOptions);\n  }\n}\n"],"sourceRoot":""}